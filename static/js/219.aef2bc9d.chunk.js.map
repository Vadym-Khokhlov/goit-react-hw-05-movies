{"version":3,"file":"static/js/219.aef2bc9d.chunk.js","mappings":"wRAEaA,EAAWC,EAAAA,GAAAA,GAAH,4HAQRC,EAAWD,EAAAA,GAAAA,GAAH,qRAaRE,EAAYF,EAAAA,GAAAA,IAAH,2DAKTG,EAAWH,EAAAA,GAAAA,EAAH,qD,mBC6BrB,EA9Ca,WACX,OAA0BI,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAwBF,EAAAA,EAAAA,UAAS,IAAjC,eAAOG,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAcR,IAZAE,EAAAA,EAAAA,YAAU,WAAM,wCACd,6GAEuBC,EAAAA,EAAAA,UAAcC,OAAOJ,IAF5C,OAEUF,EAFV,OAGIC,EAAQD,GAHZ,gDAKID,EAAS,EAAD,IALZ,0DADc,uBAAC,WAAD,wBASdQ,EACD,GAAE,CAACL,IAECF,EAIL,OACE,8BACE,SAACR,EAAD,UACGM,GACC,uBAAIA,IAEJE,EAAKQ,KAAI,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,cAAeC,EAA3B,EAA2BA,UAAWC,EAAtC,EAAsCA,aAAtC,OACP,UAAClB,EAAD,WACGkB,IACC,SAACjB,EAAD,CACEkB,IAAG,0CAAqCD,GACxCE,IAAKJ,KAGPE,IAAgB,SAAC,MAAD,CAAQG,KAAM,IAAKC,MAAM,YAC3C,SAACpB,EAAD,UAAWc,KACX,UAACd,EAAD,yBAAsBe,OATTF,EADR,OAiBlB,C,kECrDKQ,EAAM,mCAEGC,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,6GAE2BC,EAAAA,EAAAA,IAAA,kEACsCF,EADtC,2BAF3B,UAEUG,EAFV,6BAMY,IAAIC,MAAM,qCANtB,gCAQWD,EAASE,KAAKC,SARzB,gCAUIC,QAAQC,IAAR,MAVJ,gFAcA,IAAMC,EAAiB,mCAAG,WAAOC,EAAOC,GAAd,gGAECT,EAAAA,EAAAA,IAAA,4DACgCF,EADhC,iCAC4DU,EAD5D,iBAC0EC,IAH3E,UAEhBR,EAFgB,6BAMd,IAAIC,MAAM,qCANI,gCAQfD,EAASE,MARM,gCAUtBE,QAAQC,IAAR,MAVsB,yDAAH,wDAcjBI,EAAe,mCAAG,WAAM3B,GAAN,gGAEGiB,EAAAA,EAAAA,IAAA,6CACiBjB,EADjB,oBACoCe,IAHvC,UAEdG,EAFc,6BAMZ,IAAIC,MAAM,qCANE,gCAQbD,EAASE,MARI,gCAUpBE,QAAQC,IAAR,MAVoB,yDAAH,sDAefK,EAAS,mCAAG,WAAMC,GAAN,gGAESZ,EAAAA,EAAAA,IAAA,6CACiBY,EADjB,4BACuCd,EADvC,oBAFT,UAERG,EAFQ,6BAMN,IAAIC,MAAM,qCANJ,gCAQPD,EAASE,KAAKtB,MARP,gCAUdwB,QAAQ1B,MAAR,MAVc,yDAAH,sDAeTkC,EAAW,mCAAG,WAAMD,GAAN,gGAEOZ,EAAAA,EAAAA,IAAA,6CACiBY,EADjB,4BACuCd,EADvC,2BAFP,UAEVG,EAFU,6BAMR,IAAIC,MAAM,qCANF,gCAQTD,EAASE,KAAKC,SARL,gCAUhBC,QAAQ1B,MAAR,MAVgB,yDAAH,sDAcXO,EAAM,CACVa,oBA3EF,WAEeA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EA0EbW,gBAAAA,EACAH,kBAAAA,EACAM,YAAAA,EACAF,UAAAA,GAGF,K","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.js","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: flex;\n  justify-content: start;\n  gap: 30px;\n  flex-wrap: wrap;\n  list-style: none;\n`;\n\nexport const CastCard = styled.li`\n  gap: 5px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  max-height: 350px;\n  width: auto;\n  padding: 5px 10px;\n  /* border: 3px solid yellowgreen; */\n  /* border-radius: 0px 0px 14px 14px; */\n`;\n\nexport const CastImage = styled.img`\n  width: 230px;\n  height: 300px;\n`;\n\nexport const CastInfo = styled.p`\n  margin: 0;\n  padding: 0;\n`;\n","import api from 'services/api';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  CastCard,\n  CastImage,\n  CastInfo,\n  CastList,\n} from 'components/Cast/Cast.styled';\nimport { SlUser } from 'react-icons/sl';\n\nconst Cast = () => {\n  const [error, setError] = useState('');\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function getCast() {\n      try {\n        const cast = await api.fetchCast(Number(movieId));\n        setCast(cast);\n      } catch (error) {\n        setError(error);\n      }\n    }\n    getCast();\n  }, [movieId]);\n\n  if (!cast) {\n    return;\n  }\n\n  return (\n    <section>\n      <CastList>\n        {error ? (\n          <p>{error}</p>\n        ) : (\n          cast.map(({ cast_id, original_name, character, profile_path }) => (\n            <CastCard key={cast_id}>\n              {profile_path && (\n                <CastImage\n                  src={`https://image.tmdb.org/t/p/w200/${profile_path}`}\n                  alt={original_name}\n                />\n              )}\n              {!profile_path && <SlUser size={240} color=\"silver\" />}\n              <CastInfo>{original_name}</CastInfo>\n              <CastInfo>Character: {character}</CastInfo>\n            </CastCard>\n          ))\n        )}\n      </CastList>\n    </section>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst key = 'b84ac87767a32f4b7dddc0cfcc03fc4c';\n\nasync function fetchHomepageMovies() {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/trending/movie/day?api_key=${key}&language=en-US&page=1`\n    );\n    if (!response) {\n      throw new Error(\"Sorry, something wrong's happened\");\n    }\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nconst fetchMoviesByName = async (query, page) => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/search/movie?api_key=${key}&language=en-US&query=${query}&page=${page}`\n    );\n    if (!response) {\n      throw new Error(\"Sorry, something wrong's happened\");\n    }\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst fetchMoviesById = async movieId => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}?api_key=${key}`\n    );\n    if (!response) {\n      throw new Error(\"Sorry, something wrong's happened\");\n    }\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// fetchCast\nconst fetchCast = async id => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${key}&language=en-US`\n    );\n    if (!response) {\n      throw new Error(\"Sorry, something wrong's happened\");\n    }\n    return response.data.cast;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n// fetchReview\nconst fetchReview = async id => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${key}&language=en-US&page=1`\n    );\n    if (!response) {\n      throw new Error(\"Sorry, something wrong's happened\");\n    }\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst api = {\n  fetchHomepageMovies,\n  fetchMoviesById,\n  fetchMoviesByName,\n  fetchReview,\n  fetchCast,\n};\n\nexport default api;\n"],"names":["CastList","styled","CastCard","CastImage","CastInfo","useState","error","setError","cast","setCast","movieId","useParams","useEffect","api","Number","getCast","map","cast_id","original_name","character","profile_path","src","alt","size","color","key","fetchHomepageMovies","axios","response","Error","data","results","console","log","fetchMoviesByName","query","page","fetchMoviesById","fetchCast","id","fetchReview"],"sourceRoot":""}